name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: codeshare
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=5
      redis:
        image: redis:7
        ports:
          - 6379:6379
    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/codeshare
      REDIS_URL: redis://localhost:6379
      CI: true
    steps:
      - uses: actions/checkout@v5
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Cache Node dependencies
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install backend dependencies
        run: cd backend && ./mvnw dependency:go-offline
      - name: Install frontend dependencies
        run: cd frontend && npm ci
      - name: Lint frontend
        run: cd frontend && npm run lint
      - name: Test backend
        run: cd backend && ./mvnw test
      - name: Test frontend
        run: cd frontend && npm run test -- --run --coverage
      - name: Build backend
        run: cd backend && ./mvnw package -DskipTests
      - name: Build frontend
        run: cd frontend && npm run build
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            frontend/coverage/
            backend/target/site/jacoco/

  e2e-tests:
    needs: build-test-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Cache Node dependencies
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
      - name: Install frontend dependencies
        run: cd frontend && npm ci
      - name: Install Playwright browsers
        run: cd frontend && npx playwright install --with-deps
      - name: Start services with Docker Compose
        run: |
          docker compose up -d
          # Wait for services to be healthy
          timeout 300 bash -c 'until docker compose ps | grep -q "healthy"; do sleep 5; done'
      - name: Run Playwright tests
        run: cd frontend && npm run e2e
      - name: Stop services
        if: always()
        run: docker compose down

  docker-build-push:
    needs: build-test-lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v5
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push backend image
        run: |
          docker build -t ghcr.io/${{ github.repository }}/backend:latest ./backend
          docker push ghcr.io/${{ github.repository }}/backend:latest
      - name: Build and push frontend image
        run: |
          docker build -t ghcr.io/${{ github.repository }}/frontend:latest ./frontend
          docker push ghcr.io/${{ github.repository }}/frontend:latest

  # deploy to ECS
  # deploy:
  #   needs: docker-build-push
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v5
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #     - name: Install Docker Compose CLI
  #       run: |
  #         curl -L https://github.com/docker/compose-cli/releases/download/v1.0.18/docker-compose-linux-amd64 -o /usr/local/bin/docker-compose
  #         chmod +x /usr/local/bin/docker-compose
  #     - name: Deploy to ECS
  #       run: |
  #         docker context create ecs codeshare-ecs
  #         docker context use codeshare-ecs
  #         docker compose -f docker-compose.yml up
